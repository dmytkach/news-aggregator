// Code generated by MockGen. DO NOT EDIT.
// Source: news.go

// Package mock_managers is a generated GoMock package.
package mock_managers

import (
	entity "news-aggregator/internal/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNewsManager is a mock of NewsManager interface.
type MockNewsManager struct {
	ctrl     *gomock.Controller
	recorder *MockNewsManagerMockRecorder
}

// MockNewsManagerMockRecorder is the mock recorder for MockNewsManager.
type MockNewsManagerMockRecorder struct {
	mock *MockNewsManager
}

// NewMockNewsManager creates a new mock instance.
func NewMockNewsManager(ctrl *gomock.Controller) *MockNewsManager {
	mock := &MockNewsManager{ctrl: ctrl}
	mock.recorder = &MockNewsManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNewsManager) EXPECT() *MockNewsManagerMockRecorder {
	return m.recorder
}

// AddNews mocks base method.
func (m *MockNewsManager) AddNews(newsToAdd []entity.News, newsSource string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNews", newsToAdd, newsSource)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNews indicates an expected call of AddNews.
func (mr *MockNewsManagerMockRecorder) AddNews(newsToAdd, newsSource interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNews", reflect.TypeOf((*MockNewsManager)(nil).AddNews), newsToAdd, newsSource)
}

// GetNewsFromFolder mocks base method.
func (m *MockNewsManager) GetNewsFromFolder(folderName string) ([]entity.News, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewsFromFolder", folderName)
	ret0, _ := ret[0].([]entity.News)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewsFromFolder indicates an expected call of GetNewsFromFolder.
func (mr *MockNewsManagerMockRecorder) GetNewsFromFolder(folderName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewsFromFolder", reflect.TypeOf((*MockNewsManager)(nil).GetNewsFromFolder), folderName)
}

// GetNewsSourceFilePath mocks base method.
func (m *MockNewsManager) GetNewsSourceFilePath(sourceName []string) (map[string][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewsSourceFilePath", sourceName)
	ret0, _ := ret[0].(map[string][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewsSourceFilePath indicates an expected call of GetNewsSourceFilePath.
func (mr *MockNewsManagerMockRecorder) GetNewsSourceFilePath(sourceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewsSourceFilePath", reflect.TypeOf((*MockNewsManager)(nil).GetNewsSourceFilePath), sourceName)
}
