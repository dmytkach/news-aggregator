version: '3'

vars:
  cli_aggregator: ./cli/main.go
  server_aggregator: ./server/main.go
  docker_image_name: "dmytkach/news-aggregator"
  docker_image_tag: "1.0.6"
  dockerfile_path: ".Dockerfile"
  docker_port: "8443"
  server_expose_port: "8443"
  namespace_name: "news-aggregator"
  k8s_folder: "templates"
  chart_name: "aggregator-chart"
  release_name: "news-aggregator-chart"


tasks:
  test:
    cmd: go test ./...
    desc: "Run tests"

  build_server:
    cmd: go build -o ./bin/news-aggregator-server {{.server_aggregator}}
    desc: "Build web-server version"

  build_cli:
    cmd: go build -o ./bin/news-aggregator-cli {{.cli_aggregator}}
    desc: "Build cli version"
  # Usage: task run_server -- --port=:443
  run_server:
    cmd: go run {{.server_aggregator}} {{.CLI_ARGS}}
    desc: "Run the web-server locally"
  # Usage:task run_cli -- --sources=bbc_news --keywords=president
  run_cli:
    desc: "Run cli locally"
    cmd: go run {{.cli_aggregator}} {{.CLI_ARGS}}

  fmt:
    cmd: go fmt ./...
    desc: "Run go fmt"

  vet:
    cmd: go vet ./...
    desc: "Run go vet"

  mod_tidy:
    cmd: go mod tidy
    desc: "Run go mod tidy"

  check-all:
    desc: "Run all checks: mod tidy, fmt, vet, and tests"
    deps: [ fmt, vet, test, mod_tidy ]

  docker_build:
    cmd: docker build -t {{.docker_image_name}}:{{.docker_image_tag}} .
    desc: "Build Docker image"

  docker_run:
    cmd: docker run --rm -p {{.docker_port}}:{{.server_expose_port}} {{.docker_image_name}}:{{.docker_image_tag}} {{.CLI_ARGS}}
    desc: "Run Docker container locally"

  docker_push:
    desc: "Push the Docker image to the registry"
    cmd: docker push {{.docker_image_name}}:{{.docker_image_tag}}

  createChart:
    desc: "Creates a Helm chart for news-aggregator"
    cmd: helm create {{.chart_name}}

  chart_install:
    desc: "Installs the Helm chart on the Kubernetes cluster"
    deps: [ create_ns ]
    cmd: helm install {{.release_name}} ./aggregator-chart -n {{.namespace_name}}

  chart_uninstall:
    desc: "Remove news-aggregator app from Kubernetes cluster"
    cmd: helm uninstall {{.release_name}} -n {{.namespace_name}}

  create_ns:
    cmd: |
      if ! kubectl get namespace {{.namespace_name}} >/dev/null 2>&1; then
        kubectl create namespace {{.namespace_name}}
      else
        echo "Namespace {{.namespace_name}} already exists"
      fi
    desc: "Create a Kubernetes namespace if it does not exist"

  delete_ns:
    cmd: kubectl delete namespace {{.namespace_name}}
    desc: "Delete a Kubernetes namespace"