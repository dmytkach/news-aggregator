version: '3'

vars:
  IMG: dmytkach/news-aggregator-operator:1.0.0
  ENVTEST_K8S_VERSION: 1.30.0
  GOBIN: "{{ shell go env GOBIN || echo $(go env GOPATH)/bin }}"
  CONTAINER_TOOL: docker
  PLATFORMS: linux/arm64,linux/amd64,linux/s390x,linux/ppc64le
  KUSTOMIZE_VERSION: v5.4.2
  CONTROLLER_TOOLS_VERSION: v0.15.0
  ENVTEST_VERSION: release-0.18
  GOLANGCI_LINT_VERSION: v1.59.1
  LOCALBIN: "{{pwd}}/bin"
  KUBECTL: kubectl
  KUSTOMIZE: "{{.LOCALBIN}}/kustomize"
  CONTROLLER_GEN: "{{.LOCALBIN}}/controller-gen"
  ENVTEST: "{{.LOCALBIN}}/setup-envtest"
  GOLANGCI_LINT: "{{.LOCALBIN}}/golangci-lint"

tasks:
  all:
    cmds:
      - task: build

  help:
    desc: Display this help.
    cmds:
      - |
        awk 'BEGIN {FS = ":.*##"; printf "\nUsage:\n  make \033[36m<target>\033[0m\n"} /^[a-zA-Z_0-9-]+:.*?##/ { printf "  \033[36m%-15s\033[0m %s\n", $$1, $$2 } /^##@/ { printf "\n\033[1m%s\033[0m\n", substr($$0, 5) } ' Taskfile.yml

  manifests:
    desc: Generate WebhookConfiguration, ClusterRole and CustomResourceDefinition objects.
    deps: [controller-gen]
    cmds:
      - "{{.CONTROLLER_GEN}} rbac:roleName=manager-role crd webhook paths='./...' output:crd:artifacts:config=config/crd/bases"

  generate:
    desc: Generate code containing DeepCopy, DeepCopyInto, and DeepCopyObject method implementations.
    deps: [controller-gen]
    cmds:
      - "{{.CONTROLLER_GEN}} object:headerFile='hack/boilerplate.go.txt' paths='./...'"

  fmt:
    desc: Run go fmt against code.
    cmds:
      - go fmt ./...

  vet:
    desc: Run go vet against code.
    cmds:
      - go vet ./...

  test:
    desc: Run tests.
    deps: [manifests, generate, fmt, vet, envtest]
    cmds:
      - "KUBEBUILDER_ASSETS='$(shell $(ENVTEST) use $(ENVTEST_K8S_VERSION) --bin-dir $(LOCALBIN) -p path)' go test $(go list ./... | grep -v /e2e) -coverprofile cover.out"

  test-e2e:
    desc: Run the e2e tests against a Kind k8s instance that is spun up.
    cmds:
      - go test ./test/e2e/ -v -ginkgo.v

  lint:
    desc: Run golangci-lint linter
    deps: [golangci-lint]
    cmds:
      - "{{.GOLANGCI_LINT}} run"

  lint-fix:
    desc: Run golangci-lint linter and perform fixes
    deps: [golangci-lint]
    cmds:
      - "{{.GOLANGCI_LINT}} run --fix"

  build:
    desc: Build manager binary.
    deps: [manifests, generate, fmt, vet]
    cmds:
      - go build -o bin/manager cmd/main.go

  run:
    desc: Run a controller from your host.
    deps: [manifests, generate, fmt, vet]
    cmds:
      - go run ./cmd/main.go

  docker-build:
    desc: Build docker image with the manager.
    cmds:
      - "{{.CONTAINER_TOOL}} build -t {{.IMG}} ."

  docker-push:
    desc: Push docker image with the manager.
    cmds:
      - "{{.CONTAINER_TOOL}} push {{.IMG}}"

  docker-buildx:
    desc: Build and push docker image for the manager for cross-platform support
    cmds:
      - |
        sed -e '1 s/\(^FROM\)/FROM --platform=\$$\{BUILDPLATFORM\}/; t' -e ' 1,// s//FROM --platform=\$$\{BUILDPLATFORM\}/' Dockerfile > Dockerfile.cross
      - "{{.CONTAINER_TOOL}} buildx create --name operator-builder"
      - "{{.CONTAINER_TOOL}} buildx use operator-builder"
      - "{{.CONTAINER_TOOL}} buildx build --push --platform={{.PLATFORMS}} --tag {{.IMG}} -f Dockerfile.cross ."
      - "{{.CONTAINER_TOOL}} buildx rm operator-builder"
      - rm Dockerfile.cross

  build-installer:
    desc: Generate a consolidated YAML with CRDs and deployment.
    deps: [manifests, generate, kustomize]
    cmds:
      - mkdir -p dist
      - cd config/manager && {{.KUSTOMIZE}} edit set image controller={{.IMG}}
      - "{{.KUSTOMIZE}} build config/default > dist/install.yaml"

  install:
    desc: Install CRDs into the K8s cluster specified in ~/.kube/config.
    deps: [manifests, kustomize]
    cmds:
      - "{{.KUSTOMIZE}} build config/crd | {{.KUBECTL}} apply -f -"

  uninstall:
    desc: Uninstall CRDs from the K8s cluster specified in ~/.kube/config. Call with ignore-not-found=true to ignore resource not found errors during deletion.
    deps: [manifests, kustomize]
    cmds:
      - "{{.KUSTOMIZE}} build config/crd | {{.KUBECTL}} delete --ignore-not-found=${ignore-not-found} -f -"

  deploy:
    desc: Deploy controller to the K8s cluster specified in ~/.kube/config.
    deps: [manifests, kustomize]
    cmds:
      - cd config/manager && {{.KUSTOMIZE}} edit set image controller={{.IMG}}
      - "{{.KUSTOMIZE}} build config/default | {{.KUBECTL}} apply -f -"

  undeploy:
    desc: Undeploy controller from the K8s cluster specified in ~/.kube/config. Call with ignore-not-found=true to ignore resource not found errors during deletion.
    deps: [kustomize]
    cmds:
      - "{{.KUSTOMIZE}} build config/default | {{.KUBECTL}} delete --ignore-not-found=${ignore-not-found} -f -"

  kustomize:
    desc: Download kustomize locally if necessary.
    cmds:
      - |
        mkdir -p {{.LOCALBIN}} && \
        GOBIN={{.LOCALBIN}} go install sigs.k8s.io/kustomize/kustomize/v5@{{.KUSTOMIZE_VERSION}} && \
        mv {{.LOCALBIN}}/kustomize {{.LOCALBIN}}/kustomize-{{.KUSTOMIZE_VERSION}} && \
        ln -sf {{.LOCALBIN}}/kustomize-{{.KUSTOMIZE_VERSION}} {{.KUSTOMIZE}}

  controller-gen:
    desc: Download controller-gen locally if necessary.
    cmds:
      - |
        mkdir -p {{.LOCALBIN}} && \
        GOBIN={{.LOCALBIN}} go install sigs.k8s.io/controller-tools/cmd/controller-gen@{{.CONTROLLER_TOOLS_VERSION}} && \
        mv {{.LOCALBIN}}/controller-gen {{.LOCALBIN}}/controller-gen-{{.CONTROLLER_TOOLS_VERSION}} && \
        ln -sf {{.LOCALBIN}}/controller-gen-{{.CONTROLLER_TOOLS_VERSION}} {{.CONTROLLER_GEN}}

  envtest:
    desc: Download setup-envtest locally if necessary.
    cmds:
      - |
        mkdir -p {{.LOCALBIN}} && \
        GOBIN={{.LOCALBIN}} go install sigs.k8s.io/controller-runtime/tools/setup-envtest@{{.ENVTEST_VERSION}} && \
        mv {{.LOCALBIN}}/setup-envtest {{.LOCALBIN}}/setup-envtest-{{.ENVTEST_VERSION}} && \
        ln -sf {{.LOCALBIN}}/setup-envtest-{{.ENVTEST_VERSION}} {{.ENVTEST}}

  golangci-lint:
    desc: Download golangci-lint locally if necessary.
    cmds:
      - |
        mkdir -p {{.LOCALBIN}} && \
        GOBIN={{.LOCALBIN}} go install github.com/golangci/golangci-lint/cmd/golangci-lint@{{.GOLANGCI_LINT_VERSION}} && \
        mv {{.LOCALBIN}}/golangci-lint {{.LOCALBIN}}/golangci-lint-{{.GOLANGCI_LINT_VERSION}} && \
        ln -sf {{.LOCALBIN}}/golangci-lint-{{.GOLANGCI_LINT_VERSION}} {{.GOLANGCI_LINT}}

